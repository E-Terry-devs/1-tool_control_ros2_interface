#include "..\SDK\SDK_ApossC.mc"

// Axis settings
#define axis3_ENCRES 				16384				// Resolution of the encoder for position feed back in increments (quadcounts)
#define axis3_ENC_LATCHTYPE 		0					// Defines the latch type: -
#define axis3_ENC_LATCHPARAM 		0					// -
#define axis3_ENC_LATCHSLOPE 		HWLATCH_SLOPE_RISING// Defines the slope of the trigger signal (Default 1)

#define axis3_CONTROLMODE			HWAMP_MODE_POS_CUR		// Define control typ
#define axis3_POLEPAIRS				22							// Number of pole pairs
#define axis3_CONTCUR				4300						// Nomial continious current allowed in mA
#define axis3_MAXCUR				5000//axis3_CONTCUR*1.25	// Maximal current allowed in mA					// Maximal current allowed in mA
#define axis3_THERMAL_TIME			10000						// Thermal time constant of the winding ms


// Just default settings. These parameters ar overwrite by the master application

#define axis3_MAX_RPM				1700				// Maximum velocity in RPM
#define axis3_CURKPROP				3100					// Proportional factor of current controller
#define axis3_CURKINT				42						// Integral factor of current controller
#define axis3_CURKILIM				0x7FFF					// Integral limit of current controller
#define axis3_VELKPROP				0						// Proportional factor of velocity controller - not used
#define axis3_VELKINT				0						// Integral factor of velocity controller - not used
#define axis3_VELKILIM				0						// Integral limit of velocity controller - not used

#define axis3_CURBREAK		    	100

#define axis3_VELRES				100					 // Velocity resolution, Scaling used for the velocity and acceleration/deceleration commands
#define axis3_RAMPTYPE				RAMPTYPE_JERKLIMITED	// Defines the ramptype
#define axis3_RAMPMIN				50					// Maximum acceleration
#define axis3_JERKMIN				1000					// Minimum time (ms) required before reaching the maximum acceleration
#define axis3_POSERR				0

#define	axis3_KPROP				300						// Proportional value for PID position control loop
#define	axis3_KINT				10						// Integral value for PID position control loop
#define	axis3_KDER				1100					// Derivative value for PID position control loop
#define	axis3_KILIM				0						// Limit value for the integral sum of the PID position control loop
#define	axis3_KILIMTIME			0						// Time used to increase or decrease the integral limit
#define	axis3_BANDWIDTH			1000					// Bandwidth within which the PID filter is active. 1000 equals to 100% velocity setpoint
#define	axis3_FFVEL				0						// Velocity Feed forward
#define	axis3_KFFACC			00						// Acceleration Feed forward
#define	axis3_KFFDEC			00						// Deceleration Feed Forward

#define	axis3_POSENCREV			1						// Number of revolutions of the motor
#define	axis3_POSENCQC			axis3_ENCRES		// Number of quadcounts in POSENCREV revolutions
#define	axis3_POSFACT_Z			42						// Number of revolutions of the input shaft
#define	axis3_POSFACT_N			10						// Number of revolutions of the output shaft in POSFACT_Z revolutions of the input shaft
#define	axis3_FEEDREV			1							// Number of revolutions of the gear box output shaft
#define	axis3_FEEDDIST			600	// Distance travelled (in user units) in FEEDREV revolutions of the gear box output shaft


long setupaxis3_Inc(long axisNo, long encPort, long direction)
{
	print("setupaxis3_Inc");
	// Amplifier setup
	HWAMP_PARAM(axisNo, HWAMP_COMMTYPE) = HWAMP_COMMTYPE_BLDC; 	// Set motor type
	//HWAMP_PARAM(axisNo, HWAMP_COMMTYPE) = HWAMP_COMMTYPE_BLDC_120_TWIN; 	// Set motor type
	HWAMP_PARAM(axisNo, HWAMP_ELPOL) 	= -1; 								// encoder polarity vs. electrical polarity:
	HWAMP_PARAM(axisNo, HWAMP_MODE)     = axis3_CONTROLMODE;         	// Set controller priciple
    HWAMP_PARAM(axisNo, HWAMP_POLES)    = axis3_POLEPAIRS;     		// Number of pole pairs
    HWAMP_PARAM(axisNo, HWAMP_MAXCUR)   = axis3_MAXCUR;  				// Max current in mA
	HWAMP_PARAM(axisNo, HWAMP_ENCRES)   = axis3_ENCRES;  				// Given in qc
	HWAMP_PARAM(axisNo, HWAMP_MAXRPM)   = axis3_MAX_RPM;  			// Given in RPM
	HWAMP_PARAM(axisNo,HWAMP_HALL_ERROR_LIMIT) = 5;									// Disable Hall Sensor Problem with value 0

	// Encoder setup
	sdkSetupIncEncoder(			axisNo,
								encPort,
								axis3_ENCRES,
								axis3_ENC_LATCHTYPE,
								axis3_ENC_LATCHPARAM,
								axis3_ENC_LATCHSLOPE
								);

	// Set the direction of the axis
	sdkSetupAxisDirection( 		axisNo,
								direction);

	// Just default settings bellow. These parameters ar overwrite by the master application

	// Current control setup
	sdkSetupCurrentPIControl( 	axisNo,
								axis3_CURKPROP,
								axis3_CURKINT,
								axis3_CURKILIM
								);
	// Velocity control setup
	sdkSetupVelocityPIControl( 	axisNo,
								axis3_VELKPROP,
								axis3_VELKINT,
								axis3_VELKILIM
								);
	// Movement parameters for the axis
	sdkSetupAxisMovementParam(	axisNo,
								axis3_VELRES,
								axis3_MAX_RPM,
								axis3_RAMPTYPE,
								axis3_RAMPMIN,
								axis3_JERKMIN
								);

	// Position control setup
	sdkSetupPositionPIDControlExt( 	axisNo,
									axis3_KPROP,
									axis3_KINT,
									axis3_KDER,
									axis3_KILIM,
									axis3_KILIMTIME,
									axis3_BANDWIDTH,
									axis3_FFVEL,
									axis3_KFFACC,
									axis3_KFFDEC
									);
	// Definition of the user units
	sdkSetupAxisUserUnits(		axisNo,
								axis3_POSENCREV,
								axis3_POSENCQC,
								axis3_POSFACT_Z,
								axis3_POSFACT_N,
								axis3_FEEDREV,
								axis3_FEEDDIST
								);

	VIRTAMP_PARAM(axisNo,VIRTAMP_I2TLIMIT)	=	(axis3_CONTCUR/1000)*(axis3_CONTCUR/1000)*1000;		// I*I*1000
	VIRTAMP_PARAM(axisNo,VIRTAMP_I2TTIME)	= 	axis3_THERMAL_TIME;
	AXE_PARAM(axisNo,POSERR)				= 	axis3_POSERR;

	return(1);
}
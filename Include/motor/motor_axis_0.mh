#include "..\SDK\SDK_ApossC.mc"

// Axis settings
#define IDX56M_B7CFC7F7E927_ENCRES 				4*1024				// Resolution of the encoder for position feed back in increments (quadcounts)
#define IDX56M_B7CFC7F7E927_ENC_LATCHTYPE 		0					// Defines the latch type: -
#define IDX56M_B7CFC7F7E927_ENC_LATCHPARAM 		0					// -
#define IDX56M_B7CFC7F7E927_ENC_LATCHSLOPE 		HWLATCH_SLOPE_RISING// Defines the slope of the trigger signal (Default 1)

#define IDX56M_B7CFC7F7E927_CONTROLMODE			HWAMP_MODE_POS_CUR		// Define control typ
#define IDX56M_B7CFC7F7E927_POLEPAIRS			8							// Number of pole pairs
#define IDX56M_B7CFC7F7E927_CONTCUR				9350						// Nomial continious current allowed in mA
#define IDX56M_B7CFC7F7E927_MAXCUR				9000//IDX56M_B7CFC7F7E927_CONTCUR*1.25	// Maximal current allowed in mA					// Maximal current allowed in mA
#define IDX56M_B7CFC7F7E927_THERMAL_TIME		36000						// Thermal time constant of the winding ms


// Just default settings. These parameters ar overwrite by the master application

#define IDX56M_B7CFC7F7E927_MAX_RPM				114*0.80*48				// Maximum velocity in RPM
#define IDX56M_B7CFC7F7E927_CURKPROP			1000					// Proportional factor of current controller
#define IDX56M_B7CFC7F7E927_CURKINT				75						// Integral factor of current controller
#define IDX56M_B7CFC7F7E927_CURKILIM			0x7FFF					// Integral limit of current controller
#define IDX56M_B7CFC7F7E927_VELKPROP			0						// Proportional factor of velocity controller - not used
#define IDX56M_B7CFC7F7E927_VELKINT				0						// Integral factor of velocity controller - not used
#define IDX56M_B7CFC7F7E927_VELKILIM			0						// Integral limit of velocity controller - not used

#define IDX56M_B7CFC7F7E927_CURBREAK		    100

#define IDX56M_B7CFC7F7E927_VELRES				1000					 // Velocity resolution, Scaling used for the velocity and acceleration/deceleration commands
#define IDX56M_B7CFC7F7E927_RAMPTYPE			RAMPTYPE_JERKLIMITED	// Defines the ramptype
#define IDX56M_B7CFC7F7E927_RAMPMIN				5000					// Maximum acceleration
#define IDX56M_B7CFC7F7E927_JERKMIN				1000					// Minimum time (ms) required before reaching the maximum acceleration
#define IDX56M_B7CFC7F7E927_POSERR				0

#define	IDX56M_B7CFC7F7E927_KPROP				40						// Proportional value for PID position control loop
#define	IDX56M_B7CFC7F7E927_KINT				0						// Integral value for PID position control loop
#define	IDX56M_B7CFC7F7E927_KDER				1000					// Derivative value for PID position control loop
#define	IDX56M_B7CFC7F7E927_KILIM				0						// Limit value for the integral sum of the PID position control loop
#define	IDX56M_B7CFC7F7E927_KILIMTIME			0						// Time used to increase or decrease the integral limit
#define	IDX56M_B7CFC7F7E927_BANDWIDTH			1000					// Bandwidth within which the PID filter is active. 1000 equals to 100% velocity setpoint
#define	IDX56M_B7CFC7F7E927_FFVEL				0						// Velocity Feed forward
#define	IDX56M_B7CFC7F7E927_KFFACC				150						// Acceleration Feed forward
#define	IDX56M_B7CFC7F7E927_KFFDEC				150						// Deceleration Feed Forward

#define	IDX56M_B7CFC7F7E927_POSENCREV			1						// Number of revolutions of the motor
#define	IDX56M_B7CFC7F7E927_POSENCQC			IDX56M_B7CFC7F7E927_ENCRES		// Number of quadcounts in POSENCREV revolutions
#define	IDX56M_B7CFC7F7E927_POSFACT_Z			3105000*1.136						// Number of revolutions of the input shaft
#define	IDX56M_B7CFC7F7E927_POSFACT_N			37544						// Number of revolutions of the output shaft in POSFACT_Z revolutions of the input shaft
#define	IDX56M_B7CFC7F7E927_FEEDREV				1							// Number of revolutions of the gear box output shaft
#define	IDX56M_B7CFC7F7E927_FEEDDIST			36000	// Distance travelled (in user units) in FEEDREV revolutions of the gear box output shaft


long setupIDX56M_B7CFC7F7E927_Inc(long axisNo, long encPort, long direction)
{
	print("setupIDX56M_B7CFC7F7E927_Inc");
	// Amplifier setup
	HWAMP_PARAM(axisNo, HWAMP_COMMTYPE) = HWAMP_COMMTYPE_HALL_PMSM_TWIN; 	// Set motor type
	//HWAMP_PARAM(axisNo, HWAMP_COMMTYPE) = HWAMP_COMMTYPE_BLDC_120_TWIN; 	// Set motor type
	HWAMP_PARAM(axisNo, HWAMP_ELPOL) 	= -1; 								// encoder polarity vs. electrical polarity:
	HWAMP_PARAM(axisNo, HWAMP_MODE)     = IDX56M_B7CFC7F7E927_CONTROLMODE;         	// Set controller priciple
    HWAMP_PARAM(axisNo, HWAMP_POLES)    = IDX56M_B7CFC7F7E927_POLEPAIRS;     		// Number of pole pairs
    HWAMP_PARAM(axisNo, HWAMP_MAXCUR)   = IDX56M_B7CFC7F7E927_MAXCUR;  				// Max current in mA
	HWAMP_PARAM(axisNo, HWAMP_ENCRES)   = IDX56M_B7CFC7F7E927_ENCRES;  				// Given in qc
	HWAMP_PARAM(axisNo, HWAMP_MAXRPM)   = IDX56M_B7CFC7F7E927_MAX_RPM;  			// Given in RPM
	HWAMP_PARAM(axisNo,HWAMP_HALL_ERROR_LIMIT)=5;									// Disable Hall Sensor Problem with value 0

	// Encoder setup
	sdkSetupIncEncoder(			axisNo,
								encPort,
								IDX56M_B7CFC7F7E927_ENCRES,
								IDX56M_B7CFC7F7E927_ENC_LATCHTYPE,
								IDX56M_B7CFC7F7E927_ENC_LATCHPARAM,
								IDX56M_B7CFC7F7E927_ENC_LATCHSLOPE
								);

	// Set the direction of the axis
	sdkSetupAxisDirection( 		axisNo,
								direction);

	// Just default settings bellow. These parameters ar overwrite by the master application

	// Current control setup
	sdkSetupCurrentPIControl( 	axisNo,
								IDX56M_B7CFC7F7E927_CURKPROP,
								IDX56M_B7CFC7F7E927_CURKINT,
								IDX56M_B7CFC7F7E927_CURKILIM
								);
	// Velocity control setup
	sdkSetupVelocityPIControl( 	axisNo,
								IDX56M_B7CFC7F7E927_VELKPROP,
								IDX56M_B7CFC7F7E927_VELKINT,
								IDX56M_B7CFC7F7E927_VELKILIM
								);
	// Movement parameters for the axis
	sdkSetupAxisMovementParam(	axisNo,
								IDX56M_B7CFC7F7E927_VELRES,
								IDX56M_B7CFC7F7E927_MAX_RPM,
								IDX56M_B7CFC7F7E927_RAMPTYPE,
								IDX56M_B7CFC7F7E927_RAMPMIN,
								IDX56M_B7CFC7F7E927_JERKMIN
								);

	// Position control setup
	sdkSetupPositionPIDControlExt( 	axisNo,
									IDX56M_B7CFC7F7E927_KPROP,
									IDX56M_B7CFC7F7E927_KINT,
									IDX56M_B7CFC7F7E927_KDER,
									IDX56M_B7CFC7F7E927_KILIM,
									IDX56M_B7CFC7F7E927_KILIMTIME,
									IDX56M_B7CFC7F7E927_BANDWIDTH,
									IDX56M_B7CFC7F7E927_FFVEL,
									IDX56M_B7CFC7F7E927_KFFACC,
									IDX56M_B7CFC7F7E927_KFFDEC
									);
	// Definition of the user units
	sdkSetupAxisUserUnits(		axisNo,
								IDX56M_B7CFC7F7E927_POSENCREV,
								IDX56M_B7CFC7F7E927_POSENCQC,
								IDX56M_B7CFC7F7E927_POSFACT_Z,
								IDX56M_B7CFC7F7E927_POSFACT_N,
								IDX56M_B7CFC7F7E927_FEEDREV,
								IDX56M_B7CFC7F7E927_FEEDDIST
								);

	VIRTAMP_PARAM(axisNo,VIRTAMP_I2TLIMIT)	=	(IDX56M_B7CFC7F7E927_CONTCUR/1000)*(IDX56M_B7CFC7F7E927_CONTCUR/1000)*1000;		// I*I*1000
	VIRTAMP_PARAM(axisNo,VIRTAMP_I2TTIME)	= 	IDX56M_B7CFC7F7E927_THERMAL_TIME;
	AXE_PARAM(axisNo,POSERR)				= 	IDX56M_B7CFC7F7E927_POSERR;

	return(1);
}
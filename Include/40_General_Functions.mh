/*********************************************************************
** General Functions
** --USB, Init, some Calculation
**
*********************************************************************/

/*
** Initialize all temporary user parameters used by the user dialog.
*/
void initUserDialogParameter(void)
{

    USER_PARAM(USER_MONITOR_COMMAND) 	= CMD_IDLE;
    USER_PARAM(USR_MONITOR_DSP_STATUS)	= DSP_MOTOFF;

	// This line was only to facilitate the commissioning and can be deleted if necessary.
	USER_PARAM(USER_MONITOR_SENSOR) 	= 0;
	gVelocityMonitor 	= 0;
	gAngleMonitor		= 0;
	print("Init: User Dialog Parameter");

}

/*
** Converts velocity Uu to percent for Cvel(), Vel()
*/
long calcUuVelocityToPercent(long velocity)
{
	return(velocity * WHEEL_DRIVE_VELRES / WHEEL_DRIVE_MAX_VEL);
}

/*
** 	Check if the usb parameters different from the stored parameters.
**	If the usbParameter[USBINPUT_SAVE_PARAMETER] is 1, the parameters are written to the flash.
**	Attention, the flash can only be rewritten approx. 10000 times!
*/
void setUSBParameter (void)
{

    long compareParam=0;

    // Verification only happens with a real hardware
    if(SYS_INFO(SYS_PLATFORM)!=0)
    {
		if(SDUPDATE(SDUPDATE_COMMANDS_COMPLETED) > 0 && SDUPDATE(SDUPDATE_COMMANDS_FAILED)<1)
		{
			print("USB: Update successful");
			print(" SaveParameter: ", usbParameter[USBINPUT_SAVE_PARAMETER]);
			print(" ConstantVel: ", usbParameter[USBINPUT_CONST_VELOCITY]);

			if(usbParameter[USBINPUT_CONST_VELOCITY]!=USER_PARAM(USER_SETVELCONST))
			{
				USER_PARAM(USER_SETVELCONST)=usbParameter[USBINPUT_CONST_VELOCITY];
				print("USB: New Parameter");
				compareParam=1;
			}
			else
			{
				print("USB: No new Parameter");
			}



			if(usbParameter[USBINPUT_SAVE_PARAMETER]==1 && compareParam == 1)
			{
				Save(USRPARS);
				print("USB: Save new user parameter");
			}
			else if(usbParameter[USBINPUT_SAVE_PARAMETER]==0 && compareParam == 1)
			{
				print("USB: Temporary new user parameter");
			}
		}
		else
		{
			print("USB: No Update");
		}
	}
	// Constant velocity can not be < 0
	if(USER_PARAM(USER_SETVELCONST)< 0)
	{
		print("USB:	Constant velocity= < 0");
		print("USB:	Multiply velocity with -1");
		USER_PARAM(USER_SETVELCONST)= -1 * USER_PARAM(USER_SETVELCONST);
	}
	// Constant velocity cant be zero
	if(USER_PARAM(USER_SETVELCONST)==0)
	{
		print("USB:	Constant velocity cant be zero");
		print("USB:	Set default velocity");
		USER_PARAM(USER_SETVELCONST)=USER_SETVELCONST_DEFAULT;
	}
	// Constant velocity must be lower than maximal velocity
	if(USER_PARAM(USER_SETVELCONST)>WHEEL_DRIVE_MAX_VEL)
	{
		print("USB:	Constant velocity to high");
		print("USB:	Set maximal constant velocity");
		USER_PARAM(USER_SETVELCONST)=WHEEL_DRIVE_MAX_VEL;
	}

	print("Config:	Constant velocity: ", USER_PARAM(USER_SETVELCONST), " mm/s");
}


/*
** The array must first be created before it can be written to via usb stick. To do this, it must be saved once.
*/
void initUSBParameterArray(void)
{
	if(usbParameter[USBINPUT_INIT_ARRAY]==0)
	{
		//Default value for first programstart without an array on the controller
		usbParameter[USBINPUT_INIT_ARRAY]		=1;
		usbParameter[USBINPUT_SAVE_PARAMETER]	=1;

		Save(ARRAYS);

		print("Init: Array Done");
	}
}

/*
** When starting a new control unit, default values must be saved once.
*/
void initDefaultParameter(void)
{
	if(USER_PARAM(USER_INIT_PARAM)==0)
	{
		USER_PARAM(USER_INIT_PARAM) = 1;

		USER_PARAM(USER_SETVELCONST)= USER_SETVELCONST_DEFAULT;
		USER_PARAM(USER_SETACC) 	= 1000;
		USER_PARAM(USER_SETDEC) 	= 1000;
		USER_PARAM(USER_SETJERK) 	= 1000;

		Save(USRPARS);
		print("Init: Default Parameter Done");
	}

	print("Load CamCurve for look up table");

	#config "CurveSettings.zbc", CONFIGFLG_DIM

	SyncSetCurve(STEERING_CURVE_NBR, steeringCurve);
	SyncSetCurve(BOOST_CURVE_NBR, boostCurve);

}

void readAndPrintActualTemp()
{
	// Verification only happens with a real hardware
    if(SYS_INFO(SYS_PLATFORM)!=0)
    {
		sprint(printArray, "Temp ActDrive 1-3: ", HWAMP_PROCESS(0,PO_HWAMP_TEMP1)/10, " 1/10 C", ", Hardware Time: ", Time(), " ms"); // All MM6 axis has the same sensor

		/* Todo
		#if WHEELDRIVE_1_ON
			sprint(printArray, "Temp WheelDrive 1: ", SdoRead(WHEEL_DRIVE_BUSID_1,0x3201, 0x01)/10," 1/10 C",  ", Hardware Time: ", Time(), " ms");
		#endif
		#if WHEELDRIVE_2_ON
			sprint(printArray, "Temp WheelDrive 2: ", SdoRead(WHEEL_DRIVE_BUSID_2,0x3201, 0x01)/10," 1/10 C",  ", Hardware Time: ", Time(), " ms");
		#endif
		#if WHEELDRIVE_3_ON
			sprint(printArray, "Temp WheelDrive 3: ", SdoRead(WHEEL_DRIVE_BUSID_3,0x3201, 0x01)/10," 1/10 C",  ", Hardware Time: ", Time(), " ms");
		#endif
		*/
	}

}
/*
** The operating voltage of the MiniMACS6 must have a minimum level to read digital inputs. This can be checked here.
*/

long CheckMinimumLogicVoltage()
{
	// Verification only happens with a real hardware
    if(SYS_INFO(SYS_PLATFORM)!=0)
    {
		if(HWAMP_PROCESS(0,PO_HWAMP_VOLT2)<= (MM6_MIN_LOGIC_SUPPLY/4))// All MM6 axis has the same sensor
		{
			sprint(printArray, "Minimum logic voltage undershot ", HWAMP_PROCESS(0,PO_HWAMP_VOLT2) *4, " mV, Hardware Time: ", Time(), " ms");
			print("Minimum logic voltage undershot ", HWAMP_PROCESS(0,PO_HWAMP_VOLT2) *4, " mV");
			USER_PARAM(USER_ERROR_ID) = ERR_LOGICSUPPLY;
			return(0);
		}
		else
		{
			print("LogicSupply: ", HWAMP_PROCESS(0,PO_HWAMP_VOLT2) *4, " mV");
			sprint(printArray, "LogicSupply ", HWAMP_PROCESS(0,PO_HWAMP_VOLT2) *4, " mV, Hardware Time: ", Time(), " ms");
			return(1);
		}
	}


}
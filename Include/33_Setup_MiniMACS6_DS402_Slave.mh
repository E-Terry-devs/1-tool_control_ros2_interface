/*********************************************************************
** Include SDK
*********************************************************************/

void setup_MiniMACS6_DS402_Slave()
{
	SYS_PROCESS(SYS_CANOM_MASTERSTATE) = 0;

	// initialising pdo settings
	#if !DISABLE_MINIMACS6_TRAV_1
 		miniM6_PDOMapping(MIM6_BUSID_TRAV_1);
 		miniM6_SetupCanBusModuleSlow(MIM6_BUSID_TRAV_1, MIM6_BUSMOD1_TRAV_1, MIM6_DO_MODULE_TRAV_1, WHEEL_DRIVE_1, ACTUATING_DRIVE_1);
 		miniM6_SetupCanBusModuleFast(MIM6_BUSID_TRAV_1, MIM6_BUSMOD2_TRAV_1, WHEEL_DRIVE_1, ACTUATING_DRIVE_1);
 		miniM6_SetupCnfSdoParam(MIM6_BUSID_TRAV_1);

 	#endif
 	#if !DISABLE_MINIMACS6_TRAV_3
 		miniM6_PDOMapping(MIM6_BUSID_TRAV_3);
 		miniM6_SetupCanBusModuleSlow(MIM6_BUSID_TRAV_3, MIM6_BUSMOD1_TRAV_3, MIM6_DO_MODULE_TRAV_3, WHEEL_DRIVE_3, ACTUATING_DRIVE_3);
 		miniM6_SetupCanBusModuleFast(MIM6_BUSID_TRAV_3, MIM6_BUSMOD2_TRAV_3, WHEEL_DRIVE_3, ACTUATING_DRIVE_3);
 		miniM6_SetupCnfSdoParam(MIM6_BUSID_TRAV_3);
 	#endif

 	// setup virtual axis layer
 	// Traverse 1
	#if !SIMULATE_WHEEL_DRIVE_1
		miniM6_SetupVirtAxisWheelDrive(WHEEL_DRIVE_1, MIM6_BUSMOD1_TRAV_1,MIM6_BUSMOD2_TRAV_1, WHEEL_DRIVE_MAX_RPM);
	#else
		print("Comming soon");
	#endif
	#if !SIMULATE_ACT_DRIVE_1
		miniM6_SetupVirtAxisActDrive(ACTUATING_DRIVE_1, MIM6_BUSMOD1_TRAV_1,MIM6_BUSMOD2_TRAV_1);
	#else
		print("Comming soon");
	#endif
	// Travers 3
	#if !SIMULATE_WHEEL_DRIVE_3
		miniM6_SetupVirtAxisWheelDrive(WHEEL_DRIVE_3, MIM6_BUSMOD1_TRAV_3,MIM6_BUSMOD2_TRAV_3, WHEEL_DRIVE_MAX_RPM);
	#else
		print("Comming soon");
	#endif
	#if !SIMULATE_ACT_DRIVE_3
		miniM6_SetupVirtAxisActDrive(ACTUATING_DRIVE_3, MIM6_BUSMOD1_TRAV_3,MIM6_BUSMOD2_TRAV_3);
	#else
		print("Comming soon");
	#endif

	// setup virtual digital input - no simulation mode
	miniM6_SetupVirtIO();

	// start all slaves commanding them into OPERATIONAL.
	SYS_PROCESS(SYS_CANOM_MASTERSTATE) = 1;

}


long miniM6_PDOMapping(long busId)
///////////////////////////////////////////////////////////////////////////////
{
    long nodeid, last_value;
    long axOffset = 0x8000000;
    long i=0;
    nodeid = busId % 100000;

	print("miniM6_PDOMapping: " ,nodeid);

	// Reset pdo 1 - 4
	for(i=0;i<=3;i++)
	{
		// reset Transmittype
		SdoWrite(busId, MINIMACS6_TRANSMIT_PDO_1_PARAMETER+ i, 2, 255);    // TxPDO1 Transmittype

		// the pdos have to be disabled for configuring
		last_value = (SdoRead(busId, MINIMACS6_TRANSMIT_PDO_1_PARAMETER + i, 1));
		SdoWrite(busId, MINIMACS6_TRANSMIT_PDO_1_PARAMETER+ i, 1, (last_value | 0x80000000)); // disable pdo x

		//the pdos have to be disabled for configuring
		last_value = (SdoRead(busId, MINIMACS6_RECEIVE_PDO_1_PARAMETER+i, 1));
		SdoWrite(busId, MINIMACS6_RECEIVE_PDO_1_PARAMETER+ i, 1, (last_value | 0x80000000)); // disable pdo x
	}

    // config RX PDO 1
    SdoWrite(busId, (MINIMACS6_RECEIVE_PDO_1_MAPPING ), 0x00, 0);										// disable
    SdoWrite(busId, (MINIMACS6_RECEIVE_PDO_1_MAPPING ), 0x01, 0x60400010+axOffset*S_AX_WHEEL_DRVE);		// controlword
    SdoWrite(busId, (MINIMACS6_RECEIVE_PDO_1_MAPPING ), 0x02, 0x60400010+axOffset*S_AX_ACTUATING_DRIVE);// controlword
    SdoWrite(busId, (MINIMACS6_RECEIVE_PDO_1_MAPPING ), 0x03, 0x2D400210);								// digital output
	SdoWrite(busId, (MINIMACS6_RECEIVE_PDO_1_MAPPING ), 0x00, 3);     									// enable
	for(i=0;i<=3;i++)
	{
		print(SdoRead(busId, (MINIMACS6_TRANSMIT_PDO_1_PARAMETER + i),0x02));
	}
	// config RX PDO 2
    SdoWrite(busId, (MINIMACS6_RECEIVE_PDO_2_MAPPING ), 0x00, 0);										// disable
    SdoWrite(busId, (MINIMACS6_RECEIVE_PDO_2_MAPPING ), 0x01, 0x60FF0020+axOffset*S_AX_WHEEL_DRVE);  	// target velocity
    SdoWrite(busId, (MINIMACS6_RECEIVE_PDO_2_MAPPING ), 0x02, 0x607A0020+axOffset*S_AX_ACTUATING_DRIVE);// position set point
	SdoWrite(busId, (MINIMACS6_RECEIVE_PDO_2_MAPPING ), 0x00, 2);     									// enable

	// config TX PDO 1
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_1_MAPPING), 0x00, 0);     									// disable
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_1_MAPPING), 0x01, 0x60410010+axOffset*S_AX_WHEEL_DRVE);		// statusword
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_1_MAPPING), 0x02, 0x60410010+axOffset*S_AX_ACTUATING_DRIVE);// statusword
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_1_MAPPING), 0x03, 0x2D000210);								// digital input
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_1_MAPPING), 0x00, 3 );										// enable

    // config TX PDO 2
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_2_MAPPING), 0x00, 0);     									// disable
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_2_MAPPING), 0x01, 0x2D800120);								// analog input 1
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_2_MAPPING), 0x02, 0x2D810120);								// analog input 2
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_2_MAPPING), 0x00, 2 );										// enable

    // config TX PDO 3
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_3_MAPPING), 0x00, 0);     									// disable
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_3_MAPPING), 0x01, 0x60640020+axOffset*S_AX_WHEEL_DRVE);		// actual position
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_3_MAPPING), 0x02, 0x48000220);								// actual current
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_3_MAPPING), 0x00, 2 );										// enable

    // config TX PDO 4
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_4_MAPPING), 0x00, 0);     									// disable
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_4_MAPPING), 0x01, 0x60640020+axOffset*S_AX_ACTUATING_DRIVE);// actual position
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_4_MAPPING), 0x02, 0x48020220);								// actual current
    SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_4_MAPPING), 0x00, 2 );										// enable

	// fill in the wanted pdo
	SdoWrite(busId, MINIMACS6_TRANSMIT_PDO_1_PARAMETER, 1, 	(0x80000180 + 0*0x100 + nodeid));// fill in pdo
	SdoWrite(busId, MINIMACS6_TRANSMIT_PDO_2_PARAMETER, 1, 	(0x80000180 + 1*0x100 + nodeid));// fill in pdo
	SdoWrite(busId, MINIMACS6_TRANSMIT_PDO_3_PARAMETER, 1, 	(0x80000180 + 2*0x100 + nodeid));// fill in pdo
	SdoWrite(busId, MINIMACS6_TRANSMIT_PDO_4_PARAMETER, 1, 	(0x80000180 + 3*0x100 + nodeid));// fill in pdo
	SdoWrite(busId, MINIMACS6_RECEIVE_PDO_1_PARAMETER, 1, 	(0x80000200 + 0*0x100 + nodeid));// fill in pdo
	SdoWrite(busId, MINIMACS6_RECEIVE_PDO_2_PARAMETER, 1, 	(0x80000200 + 1*0x100 + nodeid));// fill in pdo

	// Sett sync type
	SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_1_PARAMETER), 0x02,  MIMI6_BUSMOD_SLOW_SYNC);		// TxPDO Transmittype SYNC
	SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_2_PARAMETER), 0x02,  MIMI6_BUSMOD_SLOW_SYNC);		// TxPDO Transmittype SYNC
	SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_3_PARAMETER), 0x02,  MIMI6_BUSMOD_FAST_SYNC);		// TxPDO Transmittype SYNC
	SdoWrite(busId, (MINIMACS6_TRANSMIT_PDO_4_PARAMETER), 0x02,  MIMI6_BUSMOD_FAST_SYNC);		// TxPDO Transmittype SYNC
	SdoWrite(busId, (MINIMACS6_RECEIVE_PDO_1_PARAMETER), 0x02,  MIMI6_BUSMOD_SLOW_SYNC);		// TxPDO Transmittype SYNC
	SdoWrite(busId, (MINIMACS6_RECEIVE_PDO_2_PARAMETER), 0x02,  MIMI6_BUSMOD_SLOW_SYNC);		// TxPDO Transmittype SYNC
	SdoWrite(busId, (MINIMACS6_RECEIVE_PDO_3_PARAMETER), 0x02,  MIMI6_BUSMOD_FAST_SYNC);		// TxPDO Transmittype SYNC
	SdoWrite(busId, (MINIMACS6_RECEIVE_PDO_4_PARAMETER), 0x02,  MIMI6_BUSMOD_FAST_SYNC);		// TxPDO Transmittype SYNC

	// enable
	SdoWrite(busId, MINIMACS6_TRANSMIT_PDO_1_PARAMETER, 1,	(0x00000180 + 0*0x100 + nodeid));// enable pdo
	SdoWrite(busId, MINIMACS6_TRANSMIT_PDO_2_PARAMETER, 1,	(0x00000180 + 1*0x100 + nodeid));// enable pdo
	SdoWrite(busId, MINIMACS6_TRANSMIT_PDO_3_PARAMETER, 1,	(0x00000180 + 2*0x100 + nodeid));// enable pdo
	SdoWrite(busId, MINIMACS6_TRANSMIT_PDO_4_PARAMETER, 1,	(0x00000180 + 3*0x100 + nodeid));// enable pdo
	SdoWrite(busId, MINIMACS6_RECEIVE_PDO_1_PARAMETER, 1,	(0x00000200 + 0*0x100 + nodeid));// enable pdo
	SdoWrite(busId, MINIMACS6_RECEIVE_PDO_2_PARAMETER, 1,	(0x00000200 + 1*0x100 + nodeid));// enable pdo

	return(1);
}

long miniM6_SetupCanBusModuleSlow(long busId, long busmod, long digoutMod, long axisNo1, long axisNo2)
{
	long pdoNumber;;

	print("miniM6_SetupCanBusModule: ", busmod);

    BUSMOD_PARAM(busmod, BUSMOD_MODE) =  BUSMOD_MODE_DEACTIVATE;			// Deactivate (objects will be deleted)
    BUSMOD_PARAM(busmod, BUSMOD_BUSTYPE) =  BUSMOD_BUSTYPE_CAN;          	// Can bus

    BUSMOD_PARAM(busmod, BUSMOD_BUSNO) =  busId / 100000;       			// Bus number (0 = master, 1 = slave CAN bus)
    BUSMOD_PARAM(busmod, BUSMOD_ID)   =  busId % 1000;        				// CAN Id for this bus module
    BUSMOD_PARAM(busmod, BUSMOD_SYNC) =  MIMI6_BUSMOD_SLOW_SYNC;            // Sync active
    BUSMOD_PARAM(busmod, BUSMOD_GUARDTIME) =  0;               				// no guarding
	BUSMOD_PARAM(busmod, BUSMOD_MODE) =  BUSMOD_MODE_ACTIVATE;				// Create bus module

	// Setup Tx mapping
	pdoNumber = 1;
    BUSMOD_PARAM(busmod, BUSMOD_PISRC_INPUT1) =  VIRTAMP_PROCESS_SRCINDEX(axisNo1,PO_VIRTAMP_CMDWORD);  		// Select the input value sources object (send to bus): CMD Word
    BUSMOD_PARAM(busmod, BUSMOD_PISRC_INPUT2) =  VIRTAMP_PROCESS_SRCINDEX(axisNo2,PO_VIRTAMP_CMDWORD);  		// Select the input value sources object (send to bus): CMD Word
    BUSMOD_PARAM(busmod, BUSMOD_PISRC_INPUT3) =  VIRTDIGOUT_PROCESS_SRCINDEX(digoutMod,PO_VIRTDIGOUT_VALWORD1);	// Select the input value sources object (send to bus): Digital outputs

	BUSMOD_PARAM(busmod, BUSMOD_TXMAP_INPUT1) =  pdoNumber*0x01000000 + 2*0x00010000 + 0;   // pdo ; length in bytes; bytes offset  control word
	BUSMOD_PARAM(busmod, BUSMOD_TXMAP_INPUT2) =  pdoNumber*0x01000000 + 2*0x00010000 + 2;   // pdo ; length in bytes; bytes offset  control word
	BUSMOD_PARAM(busmod, BUSMOD_TXMAP_INPUT3) =  pdoNumber*0x01000000 + 2*0x00010000 + 4;   // pdo ; length in bytes; bytes offset  digital output

	// Setup Rx mapping
	pdoNumber = 1;
    BUSMOD_PARAM(busmod, BUSMOD_RXMAP_POVALUE1) =  pdoNumber*0x01000000 + 2*0x00010000 + 0; // pdo ; length in bytes; bytes offset   status word
    BUSMOD_PARAM(busmod, BUSMOD_RXMAP_POVALUE2) =  pdoNumber*0x01000000 + 2*0x00010000 + 2; // pdo ; length in bytes; bytes offset   status word
    BUSMOD_PARAM(busmod, BUSMOD_RXMAP_POVALUE3) =  pdoNumber*0x01000000 + 2*0x00010000 + 4; // pdo ; length in bytes; bytes offset   digital input

    pdoNumber = 2;
    BUSMOD_PARAM(busmod, BUSMOD_RXMAP_POVALUE4) =  pdoNumber*0x01000000 + 4*0x00010000 + 0; // pdo ; length in bytes; bytes offset   analog input 1
    BUSMOD_PARAM(busmod, BUSMOD_RXMAP_POVALUE5) =  pdoNumber*0x01000000 + 4*0x00010000 + 4; // pdo ; length in bytes; bytes offset   analog inpu 2

    BUSMOD_PARAM(busmod, BUSMOD_MODE) = BUSMOD_MODE_ACTIVATE_NOSTOP;                    	// Start bus module

    return(1);
}

long miniM6_SetupCanBusModuleFast(long busId, long busmod, long axisNo1, long axisNo2)
{
	long pdoNumber;;

    print("miniM6_SetupCanBusModule: ", busmod);

    BUSMOD_PARAM(busmod, BUSMOD_MODE) =  BUSMOD_MODE_DEACTIVATE;			// Deactivate (objects will be deleted)
    BUSMOD_PARAM(busmod, BUSMOD_BUSTYPE) =  BUSMOD_BUSTYPE_CAN;          	// Can bus

    BUSMOD_PARAM(busmod, BUSMOD_BUSNO) =  busId / 100000;       			// Bus number (0 = master, 1 = slave CAN bus)
    BUSMOD_PARAM(busmod, BUSMOD_ID)   =  busId % 1000;        				// CAN Id for this bus module
    BUSMOD_PARAM(busmod, BUSMOD_SYNC) =  MIMI6_BUSMOD_FAST_SYNC;            // Sync active
    BUSMOD_PARAM(busmod, BUSMOD_GUARDTIME) = 0;               				// no guarding
	BUSMOD_PARAM(busmod, BUSMOD_MODE) =  BUSMOD_MODE_ACTIVATE;				// Create bus module

	// Setup Tx mapping
	pdoNumber = 2;
	BUSMOD_PARAM(busmod, BUSMOD_PISRC_INPUT1) =  VIRTAMP_PROCESS_SRCINDEX(axisNo1,PO_VIRTAMP_REFVEL);	// Select the input value sources object (send to bus): velocity setvel
	BUSMOD_PARAM(busmod, BUSMOD_PISRC_INPUT2) =  VIRTAMP_PROCESS_SRCINDEX(axisNo2,PO_VIRTAMP_REFPOS);	// Select the input value sources object (send to bus): position setpoint

	BUSMOD_PARAM(busmod, BUSMOD_TXMAP_INPUT1) =  pdoNumber*0x01000000 + 4*0x00010000 + 0;   // pdo ; length in bytes; bytes offset  target velocity
	BUSMOD_PARAM(busmod, BUSMOD_TXMAP_INPUT2) =  pdoNumber*0x01000000 + 4*0x00010000 + 4;   // pdo ; length in bytes; bytes offset  target position

	// Setup Rx mapping
    pdoNumber = 3;
    BUSMOD_PARAM(busmod, BUSMOD_RXMAP_POVALUE1) =  pdoNumber*0x01000000 + 4*0x00010000 + 0; // pdo ; length in bytes; bytes offset   position actual value
    BUSMOD_PARAM(busmod, BUSMOD_RXMAP_POVALUE2) =  pdoNumber*0x01000000 + 4*0x00010000 + 4; // pdo ; length in bytes; bytes offset   position actual current

    pdoNumber = 4;
    BUSMOD_PARAM(busmod, BUSMOD_RXMAP_POVALUE3) =  pdoNumber*0x01000000 + 4*0x00010000 + 0; // pdo ; length in bytes; bytes offset   position actual value
    BUSMOD_PARAM(busmod, BUSMOD_RXMAP_POVALUE4) =  pdoNumber*0x01000000 + 4*0x00010000 + 4; // pdo ; length in bytes; bytes offset   position actual current

    BUSMOD_PARAM(busmod, BUSMOD_MODE) = BUSMOD_MODE_ACTIVATE_NOSTOP;                    	// Start bus module

    return(1);
}

long miniM6_SetupCnfSdoParam(long busId)
{
	// Set ms loop sync source to CAN PDO, This feature will sync the controllers loop to a bus signal.
	SdoWrite(busId, 0x2203, 0x13, 1);

	// Set opration mode
	SdoWrite(busId, MINIMACS6_MODES_OF_OPERATION+MINIMACS6_AXOFFSET*S_AX_WHEEL_DRVE, 0x00, MINIMACS6_OP_CSV);
	SdoWrite(busId, MINIMACS6_MODES_OF_OPERATION+MINIMACS6_AXOFFSET*S_AX_ACTUATING_DRIVE, 0x00, MINIMACS6_OP_CSP);
	SdoWrite(busId, 0x607F+MINIMACS6_AXOFFSET*S_AX_WHEEL_DRVE, 0x00, WHEEL_DRIVE_MAX_RPM); // Max. Velocity allowed in profile mode. (Is converted into VELMAX r/min)

	return(1);
}

long miniM6_SetupVirtAxisWheelDrive(long axis, long busmodSlow, long busmodFast,long maxRpm)
{
	print("miniM6_SetupVirtAxisWheelDrive: ",axis );

	// virtual amplifiers have a fixed connection to axes number, axes 0 uses amplifier 0.
    VIRTAMP_PARAM(axis,VIRTAMP_PISRC_CMDWORD)    = AXE_PROCESS_SRCINDEX(axis,REG_CNTRLWORD);
    VIRTAMP_PARAM(axis,VIRTAMP_PISRC_REFPOS)     = AXE_PROCESS_SRCINDEX(axis,REG_COMPOS);
    VIRTAMP_PARAM(axis,VIRTAMP_PISRC_REFVEL)     = AXE_PROCESS_SRCINDEX(axis,REG_REFERENCE);
    VIRTAMP_PARAM(axis,VIRTAMP_PISRC_REFACC)     = AXE_PROCESS_SRCINDEX(axis,PID_FFACCPART);

    VIRTAMP_PARAM(axis,VIRTAMP_CNTRLW_PWROFF)    = 0x06;
	VIRTAMP_PARAM(axis,VIRTAMP_CNTRLW_PWRONDIS)  = 0x06;
	VIRTAMP_PARAM(axis,VIRTAMP_CNTRLW_PWRONENP)  = 0x0F;
	VIRTAMP_PARAM(axis,VIRTAMP_CNTRLW_PWRONENN)  = 0x0F;
	VIRTAMP_PARAM(axis,VIRTAMP_CNTRLW_QUICKSTOP) = 0x02;
	VIRTAMP_PARAM(axis,VIRTAMP_CNTRLW_RESET)     = 0x80;

    VIRTAMP_PARAM(axis,VIRTAMP_STOPDELAY)        = 0x00;
   	VIRTAMP_PARAM(axis,VIRTAMP_ERROR_BITMASK)    = 0x08;
    VIRTAMP_PARAM(axis,VIRTAMP_ERROR_POLARITY)   = 1;

    // Ready bit: Ready to switch on, Switched on, Operation enabled, Voltage enabled
    VIRTAMP_PARAM(axis,VIRTAMP_READY_BITMASK)   = 0x00; //todo
    VIRTAMP_PARAM(axis,VIRTAMP_READY_POLARITY)  = 1;

	VIRTAMP_PARAM(axis,VIRTAMP_PISRC_STATUS)     	= BUSMOD_PROCESS_SRCINDEX(busmodSlow, PO_BUSMOD_VALUE1);	//statusword
	VIRTCOUNTIN_PARAM(axis,VIRTCNTIN_PISRC_COUNTER) = BUSMOD_PROCESS_SRCINDEX(busmodFast, PO_BUSMOD_VALUE1);	//actual position
	VIRTAMP_PARAM(axis,VIRTAMP_PISRC_CURRENT)    	= BUSMOD_PROCESS_SRCINDEX(busmodFast, PO_BUSMOD_VALUE2); 	//actual current

	VIRTAMP_PARAM(axis,VIRTAMP_REF100PERC)       = maxRpm;
	VIRTAMP_PARAM(axis,VIRTAMP_REFLIMIT)         = 2* maxRpm;

	// Source is a position value and difference to last value is added
	VIRTCOUNTIN_PARAM(axis,VIRTCNTIN_MODE) = VIRTCNTIN_MODE_ABSOLUTE;

	// has to be the last one because it activates all
    VIRTAMP_PARAM(axis,VIRTAMP_MODE) = VIRTAMP_MODE_ENABLE;

    return(1);
}

long miniM6_SetupVirtAxisActDrive(long axis, long busmodSlow, long busmodFast)
{
	print("miniM6_SetupVirtAxisActDrive: ",axis );

	// virtual amplifiers have a fixed connection to axes number, axes 0 uses amplifier 0.
    VIRTAMP_PARAM(axis,VIRTAMP_PISRC_CMDWORD)    = AXE_PROCESS_SRCINDEX(axis,REG_CNTRLWORD);
    VIRTAMP_PARAM(axis,VIRTAMP_PISRC_REFPOS)     = AXE_PROCESS_SRCINDEX(axis,REG_COMPOS);
    VIRTAMP_PARAM(axis,VIRTAMP_PISRC_REFVEL)     = AXE_PROCESS_SRCINDEX(axis,REG_REFERENCE);
    VIRTAMP_PARAM(axis,VIRTAMP_PISRC_REFACC)     = AXE_PROCESS_SRCINDEX(axis,PID_FFACCPART);

    VIRTAMP_PARAM(axis,VIRTAMP_CNTRLW_PWROFF)    = 0x06;
	VIRTAMP_PARAM(axis,VIRTAMP_CNTRLW_PWRONDIS)  = 0x06;
	VIRTAMP_PARAM(axis,VIRTAMP_CNTRLW_PWRONENP)  = 0x0F;
	VIRTAMP_PARAM(axis,VIRTAMP_CNTRLW_PWRONENN)  = 0x0F;
	VIRTAMP_PARAM(axis,VIRTAMP_CNTRLW_QUICKSTOP) = 0x02;
	VIRTAMP_PARAM(axis,VIRTAMP_CNTRLW_RESET)     = 0x80;

    VIRTAMP_PARAM(axis,VIRTAMP_STOPDELAY)        = 0x00;
   	VIRTAMP_PARAM(axis,VIRTAMP_ERROR_BITMASK)    = 0x08;
    VIRTAMP_PARAM(axis,VIRTAMP_ERROR_POLARITY)   = 1;

    // Ready bit: Ready to switch on, Switched on, Operation enabled, Voltage enabled
    VIRTAMP_PARAM(axis,VIRTAMP_READY_BITMASK)   = 0x00;
    VIRTAMP_PARAM(axis,VIRTAMP_READY_POLARITY)  = 1;

	VIRTAMP_PARAM(axis,VIRTAMP_PISRC_STATUS)     	= BUSMOD_PROCESS_SRCINDEX(busmodSlow, PO_BUSMOD_VALUE2);	//statusword
	VIRTCOUNTIN_PARAM(axis,VIRTCNTIN_PISRC_COUNTER) = BUSMOD_PROCESS_SRCINDEX(busmodFast, PO_BUSMOD_VALUE3);	//actual position
	VIRTAMP_PARAM(axis,VIRTAMP_PISRC_CURRENT)    	= BUSMOD_PROCESS_SRCINDEX(busmodFast, PO_BUSMOD_VALUE4); 	//actual current

	VIRTAMP_PARAM(axis,VIRTAMP_REF100PERC)       = 0;  // not used in csp
	VIRTAMP_PARAM(axis,VIRTAMP_REFLIMIT)         = 0;  // not used in csp

	// Source is absolute and is taken as it is
	VIRTCOUNTIN_PARAM(axis,VIRTCNTIN_MODE) = VIRTCNTIN_MODE_ABSOLUTE_DIRECT;

	// has to be the last one because it activates all
    VIRTAMP_PARAM(axis,VIRTAMP_MODE) = VIRTAMP_MODE_ENABLE;

    return(1);
}

long miniM6_SetupVirtIO()
{
	long busModOffset = 0x10000;
	print("miniM6_SetupVirtIO: ");
	VIRTDIGIN_PARAM(MIM6_DO_MODULE_TRAV_1,VIRTDIGIN_PISRC_MAP1) = 0x4C000320+busModOffset*MIM6_BUSMOD1_TRAV_1;
	VIRTDIGIN_PARAM(MIM6_DO_MODULE_TRAV_3,VIRTDIGIN_PISRC_MAP1) = 0x4C000320+busModOffset*MIM6_BUSMOD1_TRAV_3;

	VIRTANIN_PARAM(MIM6_AI1_MODULE_TRAV_1,VIRTANIN_PISRC_VALUE) = BUSMOD_PROCESS_SRCINDEX(MIM6_BUSMOD1_TRAV_1,PO_BUSMOD_VALUE4);
	VIRTANIN_PARAM(MIM6_AI2_MODULE_TRAV_1,VIRTANIN_PISRC_VALUE) = BUSMOD_PROCESS_SRCINDEX(MIM6_BUSMOD1_TRAV_1,PO_BUSMOD_VALUE5);

	VIRTANIN_PARAM(MIM6_AI1_MODULE_TRAV_3,VIRTANIN_PISRC_VALUE) = BUSMOD_PROCESS_SRCINDEX(MIM6_BUSMOD1_TRAV_3,PO_BUSMOD_VALUE4);
	VIRTANIN_PARAM(MIM6_AI2_MODULE_TRAV_3,VIRTANIN_PISRC_VALUE) = BUSMOD_PROCESS_SRCINDEX(MIM6_BUSMOD1_TRAV_3,PO_BUSMOD_VALUE5);
	return(1);
}

long miniM6_SetupCurrentPIControl(long busId, long axis, long curkprop, long curkint, long curkilim)
{
	// parameters for velocity controller
	if(MIM6_BUSID_TRAV_1 == busId && ! DISABLE_MINIMACS6_TRAV_1 || MIM6_BUSID_TRAV_3 == busId && ! DISABLE_MINIMACS6_TRAV_3)
	{
		SdoWrite(busId,SDOINDEX_HWAMP_PARAM+axis,HWAMP_CURKPROP, curkprop);	// current-controller  proportional factor:   +/-32767   (CURKPROP)
		SdoWrite(busId,SDOINDEX_HWAMP_PARAM+axis,HWAMP_CURKINT, curkint);	// current-controller  integral factor:       +/-32767   (CURKINT)
		SdoWrite(busId,SDOINDEX_HWAMP_PARAM+axis,HWAMP_CURKILIM, curkilim);	// current-controller Integral limit:         0 … 32767  (CURKILIM)
	}
	else
	{
		print("miniM6_SetupCurrentPIControl - no writing");
	}

	return(1);
}

long miniM6_SetupConstants(long busId, long axis, long maxcurrent, long maxrpm)
{
	if(MIM6_BUSID_TRAV_1 == busId && ! DISABLE_MINIMACS6_TRAV_1 || MIM6_BUSID_TRAV_3 == busId && ! DISABLE_MINIMACS6_TRAV_3)
	{
		SdoWrite(busId,SDOINDEX_HWAMP_PARAM+axis,HWAMP_MAXCUR, maxcurrent);	// current-controller  proportional factor:   +/-32767   (CURKPROP)
		SdoWrite(busId,SDOINDEX_HWAMP_PARAM+axis,HWAMP_MAXRPM, maxrpm);	// current-controller  integral factor:       +/-32767   (CURKINT)
	}
	else
	{
		print("miniM6_SetupCurrentPIControl - no writing");
	}

	return(1);
}

long miniM6_SetupVelocityPIControl(long busId, long axis, long velkprop, long velkint, long velkilim)
{
	// parameters for velocity controller
	if(MIM6_BUSID_TRAV_1 == busId && ! DISABLE_MINIMACS6_TRAV_1 || MIM6_BUSID_TRAV_3 == busId && ! DISABLE_MINIMACS6_TRAV_3)
	{
		SdoWrite(busId,SDOINDEX_HWAMP_PARAM+axis,HWAMP_VELKPROP, velkprop);	// velocity-controller  proportional factor:   +/-32767   (VELKPROP)
		SdoWrite(busId,SDOINDEX_HWAMP_PARAM+axis,HWAMP_VELKINT, velkint);	// velocity-controller  integral factor:       +/-32767   (VELKINT)
		SdoWrite(busId,SDOINDEX_HWAMP_PARAM+axis,HWAMP_VELKILIM, velkilim);	// velocity-controller Integral limit:         0 … 32767  (VELKILIM)
	}
	else
	{
		print("miniM6_SetupVelocityPIControl - no writing");
	}

	return(1);
}
long miniM6_SetupPositionPIDControl(long busId, long axis, long kprop, long kint, long kder, long kilim)
{
	// parameters for velocity controller
	if(MIM6_BUSID_TRAV_1 == busId && ! DISABLE_MINIMACS6_TRAV_1 || MIM6_BUSID_TRAV_3 == busId && ! DISABLE_MINIMACS6_TRAV_3)
	{
		SdoWrite(busId,SDOINDEX_AXE_PARAM+axis,KPROP, kprop);	// position-controller  proportional factor:   +/-32767   (KPROP)
		SdoWrite(busId,SDOINDEX_AXE_PARAM+axis,KINT, kint);		// position-controller  integral factor:       +/-32767   (KINT)
		SdoWrite(busId,SDOINDEX_AXE_PARAM+axis,KDER, kder);		// position-controller  differencial factor:   +/-32767   (KDER)
		SdoWrite(busId,SDOINDEX_AXE_PARAM+axis,KILIM, kilim);	// position-controller Integral limit:         0 … 32767  (KILIM)
	}
	else
	{
		print("miniM6_SetupVelocityPIControl - no writing");
	}

	return(1);
}

/**
*	@brief 		State machine function for performing a homing on an MiniMACS6 DS402 slave
*	@details	This function sets the MiniMACS6 DS402 slave in homing mode and starts the homing defined on the MiniMACS6 DS402 slave. Before calling this function,
*				all homing parameters must be configured on the MiniMACS6 DS402 slave. The function is not blocking.
*				The return parameter must be checked.
* 	@param 		axis			Axis module number
* 	@param 		busId			Bus ID of the connected slave
* 	@param 		operationMode 	Operation mod which should be set after homing.
* 	@param 		homingState		Call-by-reference variable for the iteration of the different homing states.
*								Must be initialized with 0.
*	@return 	value:	Process value \n
*				value 	> 0 Process successful 	\n
*				value 	= 0 Process is active 	\n
*				value 	< 0 Error
*
*/

long miniM6_AxisHomingStart(long axis, long slaveAxis, long busId, long operationMode, long &homingState)
///////////////////////////////////////////////////////////////////////////////
{
    long time, displayMode;
	long axOffset = 0x800;
    time= Time()%1000;

   	switch (homingState) {
		case 0:
			print("sdkMiniMACS6_AxisHomingStart: " ,axis);
   			homingState = 1;
   			break;
		case 1:
			// x6060 Change operation mode to ”6: Homing mode.”
			SdoWrite( busId, MINIMACS6_MODES_OF_OPERATION+axOffset*slaveAxis, 0, MINIMACS6_OP_HMM);
			print("...: DS402 Homing AxisNo: ",axis," - Set mode of OP: 0x06");

			Delay(10);
			print("...: DS402 Homing AxisNo: ",axis," - Enable Drive");
		   	AxisControl(axis, ON);

			homingState = 2;

		case 2:

			if(displayMode== MINIMACS6_OP_HMM)
			{
				print("...: DS402 Homing AxisNo: ",axis," - Display mode of OP: ",displayMode);
				homingState = 3;
			}
			else if(time==0)
			{
				displayMode = SdoRead(busId, MINIMACS6_MODES_OF_OPERATION_DISPLAY+axOffset*slaveAxis, 0);
				printf("...: DS402 Homing AxisNo: %ld - Waiting for OP mode display:   %lx\n",axis, VIRTAMP_PROCESS(axis,PO_VIRTAMP_STATUS));
				// This section  must be called in a 1 ms loop because of the print function.
				Delay(1);
			}
		   	break;

		case 3:
			// Bit 10 Target reached - Homing procedure is interrupted or not started
			if(VIRTAMP_PROCESS(axis,PO_VIRTAMP_STATUS).i[10]==1)
			{
				printf("...: DS402 Homing AxisNo: %ld - Homing start signal Status:   %lx\n",axis,VIRTAMP_PROCESS(axis,PO_VIRTAMP_STATUS));
				VIRTAMP_PARAM(axis, VIRTAMP_CNTRLW_PWRONENP) = 0x1F;
				VIRTAMP_PARAM(axis, VIRTAMP_CNTRLW_PWRONENN) = 0x1F;
				homingState = 4;
			}
			// Bit 13 Homingerror - Homing error occurred
			else if(VIRTAMP_PROCESS(axis,PO_VIRTAMP_STATUS).i[13]==1)
			{
				printf("...: DS402 Homing AxisNo: %ld - Homing Error - Status:   %lx\n",axis, VIRTAMP_PROCESS(axis,PO_VIRTAMP_STATUS));
				return(-1);
			}
			else if(time==0)
			{
				printf("...: DS402 Homing AxisNo: %ld - Waiting for ready bit:   %lx\n",axis, VIRTAMP_PROCESS(axis,PO_VIRTAMP_STATUS));
				// This section  must be called in a 1 ms loop because of the print function.
				Delay(1);
			}
			break;

		case 4:
			   	// Homing procedure is completed successfully
				if (VIRTAMP_PROCESS(axis,PO_VIRTAMP_STATUS).i[12]==1)
				{
					printf("...: DS402 Homing AxisNo: %ld - Homing done - Status:   %lx\n",axis, VIRTAMP_PROCESS(axis,PO_VIRTAMP_STATUS));

					VIRTAMP_PARAM(axis, VIRTAMP_CNTRLW_PWRONENP) = 0x0F;
					VIRTAMP_PARAM(axis, VIRTAMP_CNTRLW_PWRONENN) = 0x0F;

					print("...: DS402 Homing AxisNo: ",axis," - Disable Drive");
		   			AxisControl(axis, OFF);

					SdoWriten(busId, MINIMACS6_MODES_OF_OPERATION+axOffset*slaveAxis, 0, 1, operationMode );        // 0x6060 Change operation mode to ”8: CSP mode.”

					homingState = 5;
					break;
			   	}
				// Bit 13 Homingerror - Homing error occurred
				else if(VIRTAMP_PROCESS(axis,PO_VIRTAMP_STATUS).i[13]==1)
				{
					printf("...: DS402 Homing AxisNo: %ld - Homing Error - Status:   %lx\n",axis, VIRTAMP_PROCESS(axis,PO_VIRTAMP_STATUS));
					return(-1);
				}
				// Homing procedure is in progress
			   	else if(time==0)
			   	{
			   		printf("...: DS402 Homing AxisNo: %ld - Homing in progress - Status:   %lx\n",axis, VIRTAMP_PROCESS(axis,PO_VIRTAMP_STATUS));
			   		// This section  must be called in a 1 ms loop because of the print function.
			   		Delay(1);
			   	}
			   	break;

		case 5:
			displayMode = SdoRead(busId, MINIMACS6_MODES_OF_OPERATION_DISPLAY+axOffset*slaveAxis, 0);
			if(displayMode== operationMode)
			{
				print("...: DS402 Homing AxisNo: ",axis," - Display mode of OP: ",displayMode);
				homingState = 6;
			}
			else if(time==0)
			{
				printf("...: DS402 Homing AxisNo: %ld - Waiting for OP mode display:   %lx\n",axis, VIRTAMP_PROCESS(axis,PO_VIRTAMP_STATUS));
				// This section  must be called in a 1 ms loop because of the print function.
				Delay(1);
			}
		case 6:
 		   	print("...: DS402 Homing AxisNo: ",axis," - Finished");
		   	homingState = 7;
		   	return(1);
		case 7:
			return(1);
		default :
			print("...: DS402 Homing AxisNo: ",axis," - Incorrect hominState init value: ", homingState);
			return(-1);
	}

	return(0);
}

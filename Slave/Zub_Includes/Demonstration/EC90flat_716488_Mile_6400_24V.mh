
#include "SDK\SDK_ApossC.mc"

// Axis settings
#define EC90flat_716488_ENCRES 				6400*4				// Resolution of the encoder for position feed back in increments (quadcounts)
#define EC90flat_716488_ENC_LATCHTYPE 		1					// Defines the latch type: Digital input
#define EC90flat_716488_ENC_LATCHPARAM 		1					// Latch on digital input 1
#define EC90flat_716488_ENC_LATCHSLOPE 		HWLATCH_SLOPE_RISING// Defines the slope of the trigger signal (Default 1)

#define EC90flat_716488_CONTROLMODE		HWAMP_MODE_POS_VEL_CUR		// Define control typ
#define EC90flat_716488_POLEPAIRS		11						// Number of pole pairs
#define EC90flat_716488_ELPOL			-1						// Always -1 with a maxon motor
#define EC90flat_716488_CONTCUR			10500					// Nomial continious current allowed in mA
#define EC90flat_716488_MAXCUR			EC90flat_716488_CONTCUR*2		// Maximal current allowed in mA
#define EC90flat_716488_THERMAL_TIME	27900					// Thermal time constant of the winding
#define EC90flat_716488_MAX_RPM			1350					// Maximum velocity in RPM
#define EC90flat_716488_CURKPROP		800						// Proportional factor of current controller
#define EC90flat_716488_CURKINT			80						// Integral factor of current controller
#define EC90flat_716488_CURKILIM		32767					// Integral limit of current controller
#define EC90flat_716488_VELKPROP		7000					// Proportional factor of velocity controller
#define EC90flat_716488_VELKINT			0						// Integral factor of velocity controller
#define EC90flat_716488_VELKILIM		1000					// Integral limit of velocity controller

#define EC90flat_716488_VELRES			1000					// Velocity resolution, Scaling used for the velocity and acceleration/deceleration commands
#define EC90flat_716488_RAMPTYPE		RAMPTYPE_JERKLIMITED	// Defines the ramptype
#define EC90flat_716488_RAMPMIN			1000					// Maximum acceleration
#define EC90flat_716488_JERKMIN			100						// Minimum time (ms) required before reaching the maximum acceleration
#define EC90flat_716488_POSERR			2000					// Minimum time (ms) required before reaching the maximum acceleration
#define EC90flat_716488_DIRECTION		1						// User units have normal orientation. Increasing encoder values result in increasing user positions.

#define	EC90flat_716488_KPROP			250						// Proportional value for PID position control loop
#define	EC90flat_716488_KINT			0						// Integral value for PID position control loop
#define	EC90flat_716488_KDER			500						// Derivative value for PID position control loop
#define	EC90flat_716488_KILIM			1000					// Limit value for the integral sum of the PID position control loop
#define	EC90flat_716488_KILIMTIME		0						// Time used to increase or decrease the integral limit
#define	EC90flat_716488_BANDWIDTH		1000					// Bandwidth within which the PID filter is active. 1000 equals to 100% velocity setpoint
#define	EC90flat_716488_FFVEL			1000					// Velocity Feed forward
#define	EC90flat_716488_KFFAC			10						// Acceleration Feed forward
#define	EC90flat_716488_KFFDEC			10						// Deceleration Feed Forward

#define	EC90flat_716488_POSENCREV		1						// Number of revolutions of the motor
#define	EC90flat_716488_POSENCQC		EC90flat_716488_ENCRES			// Number of quadcounts in POSENCREV revolutions
#define	EC90flat_716488_POSFACT_Z		1						// Number of revolutions of the input shaft
#define	EC90flat_716488_POSFACT_N		1						// Number of revolutions of the output shaft in POSFACT_Z revolutions of the input shaft
#define	EC90flat_716488_FEEDREV			1						// Number of revolutions of the gear box output shaft
#define	EC90flat_716488_FEEDDIST		EC90flat_716488_ENCRES			// Distance travelled (in user units) in FEEDREV revolutions of the gear box output shaft


long setupEC90flat_716488_Inc(long axisNo, long encPort)
{
	// Encoder setup
	sdkSetupIncEncoder(			axisNo,
								encPort,
								EC90flat_716488_ENCRES,
								EC90flat_716488_ENC_LATCHTYPE,
								EC90flat_716488_ENC_LATCHPARAM,
								EC90flat_716488_ENC_LATCHSLOPE
								);
	// Amplifier setup
	sdkSetupAmpHallPmsmMotor(	axisNo,
								EC90flat_716488_CONTROLMODE,
								EC90flat_716488_POLEPAIRS,
								EC90flat_716488_MAXCUR,
								EC90flat_716488_ENCRES,
								EC90flat_716488_MAX_RPM,
								EC90flat_716488_ELPOL
								);
	// Current control setup
	sdkSetupCurrentPIControl( 	axisNo,
								EC90flat_716488_CURKPROP,
								EC90flat_716488_CURKINT,
								EC90flat_716488_CURKILIM
								);
	// Velocity control setup
	sdkSetupVelocityPIControl( 	axisNo,
								EC90flat_716488_VELKPROP,
								EC90flat_716488_VELKINT,
								EC90flat_716488_VELKILIM
								);
	// Movement parameters for the axis
	sdkSetupAxisMovementParam(	axisNo,
								EC90flat_716488_VELRES,
								EC90flat_716488_MAX_RPM,
								EC90flat_716488_RAMPTYPE,
								EC90flat_716488_RAMPMIN,
								EC90flat_716488_JERKMIN
								);
	// Set the direction of the axis
	sdkSetupAxisDirection( 		axisNo,
								EC90flat_716488_DIRECTION);
	// Position control setup
	sdkSetupPositionPIDControlExt( 	axisNo,
									EC90flat_716488_KPROP,
									EC90flat_716488_KINT,
									EC90flat_716488_KDER,
									EC90flat_716488_KILIM,
									EC90flat_716488_KILIMTIME,
									EC90flat_716488_BANDWIDTH,
									EC90flat_716488_FFVEL,
									EC90flat_716488_KFFAC,
									EC90flat_716488_KFFDEC
									);
	// Definition of the user units
	sdkSetupAxisUserUnits(		axisNo,
								EC90flat_716488_POSENCREV,
								EC90flat_716488_POSENCQC,
								EC90flat_716488_POSFACT_Z,
								EC90flat_716488_POSFACT_N,
								EC90flat_716488_FEEDREV,
								EC90flat_716488_FEEDDIST
								);

	VIRTAMP_PARAM(axisNo,VIRTAMP_I2TLIMIT)	=	(EC90flat_716488_CONTCUR/1000)*(EC90flat_716488_CONTCUR/1000)*1000;		// I*I*1000
	VIRTAMP_PARAM(axisNo,VIRTAMP_I2TTIME)	= 	EC90flat_716488_THERMAL_TIME;
	AXE_PARAM(axisNo,POSERR)				= 	EC90flat_716488_POSERR;

	return(1);
}
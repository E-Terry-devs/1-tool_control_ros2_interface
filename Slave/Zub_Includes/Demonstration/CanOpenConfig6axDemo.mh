//---------------------------------------------------------------------------------------------------
// CanOpenConfig6axDemo.mi (6-axis Demo Application)
//
// This file contains the configuration definitions for the zub CanOpenStatemachine.
// These particular definitions are for the 6-axis Demo application.

#define REAL_AXIS_CNT   0       				// Number of real axes in system.

#if REAL_AXIS_CNT
	#include "EC90flat_716488_Mile_6400_24V.mh"		//Set amplifier and encoder parameter
	#include "ECi40_500749_Y983425_EASY_16_24V.mh"	//Set amplifier and encoder parameter
#endif

//----------------------------------------------
// ZBCOS_CNF_CMDCOUNTERS
//----------------------------------------------
// Use of command counters (not standard CanOpen)
// If the next define is not zero, then the COS uses commandcounters to detect a new command.
// This is useful if we need to be very fast so that the commanding software won't wait for the
// status to find out if a command was executed or not.
// The commandcounters are axis-specific, so the following version is only valid for a maximum of
// four axes.
// If not zero, then the number has to be the sysvar index where commandcounters are stored i.e. 0x01220101

//#define ZBCOS_CNF_CMDCOUNTERS       0x01220101
#define ZBCOS_CNF_CMDCOUNTERS       0

//----------------------------------------------
// ZBCOS_CNF_POSITION_OPTCODE
//----------------------------------------------
// The option code for positioning mode is defined here.
// The following options are available at the moment. They can be added.
// ZBCOS_POSOPT_POSRESPONSE_AUTO_READY  -  the start bit (NewSetPoint) in the command word is reset automatically as soon as possible
// ZBCOS_POSOPT_POSRESPONSE_AUTO_TARGET -  the newsetp bit in the command word is reset automatically when target is reached

#define ZBCOS_CNF_POSITION_OPTCODE  0

//----------------------------------------------
// ZBCOS_CNF_AUTO_SWITCH_ON
//----------------------------------------------
// If the state machine should change automatically from SWITCHONDIS to READYTOSWITCH (Trans. 2), then
// it is defined here.
// This is not CanOpen compliant, but it allows entering into operation enable more quickly. Some applications want that.
// 0 - no automatic switching
// 1 - automatic switching enabled

#define ZBCOS_CNF_AUTO_SWITCH_ON    0


/*
** If AppE0 and AppE1 modes are being used, then define the following
** using your own function names for "funcname".  Otherwise, leave them
** undefined.  You must implement each "funcname" as a standard state
** function with the following prototype:
**
**    long funcname(long id, long signal, long[] event, long[] data);
*/

// #define ZBCOS_MODOP_APP_E0_FUNCTION   funcname
// #define ZBCOS_MODOP_APP_E1_FUNCTION   funcname


/*********************************************************************
** CanOpenApplInit
**
**    This routine should run application initializations are necessary.
** If the initialization completes successfully,  then 0 should be returned.
**
** Return codes:  0     - Initializations succeeded.
**                Other - Initialization failed.
*/

long CanOpenApplInit()
{
    long res;

    print("Application Initialization");
    res = 0;

    return(res);
}

/*-------------------------------------------------------------------------------------------------------
	axis: 				axis number starting with 1
	isMaster: 			1, if master encoder simulation should be setup, 0 otherwise
	zdist: 				distance of generated index pulses (only for master)
	unitno:				numerator of divider
	incno:              denominator of divider
---------------------------------------------------------------------------------------------------------*/
void setupEncoderSim(long axis, long isMaster, long zdist, long unitno, long incno)
{
	long modNo;
	long maxAxis;

	maxAxis = Sysvar[0x01220905];

	if(isMaster)
		modNo = maxAxis + axis;
	else
		modNo = axis;

	VIRTLATCH_PARAM(modNo, VIRTLATCH_MODE) = VIRTLATCH_MODE_SIMULATOR;
	VIRTCOUNTIN_PARAM(modNo, VIRTCNTIN_UUFACT_UNITNO) = unitno;
	VIRTCOUNTIN_PARAM(modNo, VIRTCNTIN_UUFACT_INCNO) = incno;

	if(isMaster)
	{
		VIRTCOUNTIN_PARAM(modNo, VIRTCNTIN_PISRC_COUNTER) =  VIRTCOUNTIN_PARAM_SRCINDEX(modNo, VIRTCNTIN_SIMULATION_SPEED);
		VIRTCOUNTIN_PARAM(modNo, VIRTCNTIN_MODE) = VIRTCNTIN_MODE_DELTA;
		VIRTLATCH_PARAM(modNo, VIRTLATCH_PISRC_COUNTER) = VIRTCOUNTIN_PROCESS_SRCINDEX(modNo, PO_VIRTCNTIN_VALUE);
		VIRTLATCH_PARAM(modNo, VIRTLATCH_SIM_ZDIST) = zdist;
		VIRTLATCH_PROCESS(modNo, PO_VIRTLATCH_VALUE) = VIRTCOUNTIN_PROCESS(modNo, PO_VIRTCNTIN_VALUE);	//reset latch position
	}
	else
	{
		VIRTCOUNTIN_PARAM(modNo, VIRTCNTIN_PISRC_COUNTER) = AXE_PROCESS_SRCINDEX(modNo, REG_COMPOS);
		VIRTCOUNTIN_PARAM(modNo, VIRTCNTIN_MODE) =  VIRTCNTIN_MODE_SIMULATION_SLAVE;
		VIRTLATCH_PARAM(modNo, VIRTLATCH_PISRC_COUNTER) = AXE_PROCESS_SRCINDEX(modNo, REG_ACTPOS);
		VIRTLATCH_PARAM(modNo, VIRTLATCH_SIM_ZDIST) = zdist;
	}
}

/*********************************************************************
** CanOpenSelfTest
**
**    This routine should run whatever self-tests and initializations
** are necessary.  If the tests and initialization complete successfully,
** then 0 should be returned.  This will cause the state machine to
** transition to the "Not ready to switch on" state. If the tests or
** initialization fail, then the user must decide, based on the specific
** end application, how to handle it.  Possibilities include executing
** the SmStop command to terminate the state machine, executing the Exit
** command to stop the entire Aposs program, simply repeating the tests
** and initializations, or some other solution.
**
** Return codes:  0     - Self-test and initializations succeeded.
**                Other - Test and initialization failed.
*/

long CanOpenSelfTest(long id)
{
    long res;
    print ("Axis ",id,": Self-test & Initialization");


    // Encoder and Amplifier settings

    #if REAL_AXIS_CNT
		if (id < REAL_AXIS_CNT)
			//setupEC90flat_716488_Inc(id,id);
			setupECi40_500749_Inc(id,id);
		else
			setupEncoderSim(id, 0, 1000, 1, 1);
    #else
    	setupEncoderSim(id, 0, 1000, 1, 1);
	#endif

    // Actual axis-specific paramters
    switch (id) {
        case 1:

            break;
        case 2:

            break;
        case 3:

            break;
        default:
            break;
        } //endswitch

    /*
    ** If necessary, define the default values for the CanOpen-relevant SDOs.
    */

    // preset the wanted position option code (see above)
    ZBCO_POSITIONOPTCODE(id) = ZBCOS_CNF_POSITION_OPTCODE;

    // CanOpen state machine parameters (default)
    ZBCOS_AXES_SDO(id, ZBCOI_TARGETPOS) =  0;           // Target Position
    ZBCOS_AXES_SDO(id, ZBCOI_TARGETVEL) =  5000;      	// Profile Velocity uu/sec pvm
    ZBCOS_AXES_SDO(id, ZBCOI_PROFILEVEL)=  5000;      	// Profile Velocity uu/sec ppm
    ZBCOS_AXES_SDO(id, ZBCOI_PROFILEACC)=  2500;      	// Profile Acceleration uu/sec2
    ZBCOS_AXES_SDO(id, ZBCOI_PROFILEDEC)=  2500;      	// Profile Deceleration uu/sec2
    // Initialize home parameters
    ZBCOS_AXES_SDO(id, ZBCOI_HOMEVEL)   =   2000;     	// Home Velocity uu/sec
    ZBCOS_AXES_SDO(id, ZBCOI_HOMEACC)   =   500;     	// Home Acceleration uu/sec
    ZBCOS_AXES_SDO(id, ZBCOI_HOMEMODE)  =   37;     	// Home Type
    ZBCOS_AXES_SDO(id, ZBCOI_HOMEOFFSET)= 	6400;       // Set homing offset to 6400 qc

    res = 0;

    return(res);
}

/*********************************************************************
** CanOpenTestOpMode
**
**    This routine should test for any custom user-specific operational
** modes that have been implemented.  These custom operational modes
** should be  implemented in one or more ".mi" include files and the
** "CanOpenOpModes.mi" include file should be modified to inlcude them.
**
** Return codes:  SmTrans(->xxx) - Operation mode found.
**                SmNotHandled   - Operation code not recognized.
*/

long CanOpenTestOpMode(long opmode)
{
	print("CanOpenTestOpMode: ", opmode);

//  if (opmode == ZBCOS_MODOP_xxx) then return(SmTrans(->DriveModeXxx)) endif
//  if (opmode == ZBCOS_MODOP_yyy) then return(SmTrans(->DriveModeYyy)) endif
//  if (opmode == ZBCOS_MODOP_zzz) then return(SmTrans(->DriveModeZzz)) endif

    return(SmNotHandled);
}
